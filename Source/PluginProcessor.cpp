/*
  ==============================================================================

    This file contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
puannhiAudioProcessor::puannhiAudioProcessor()
#ifndef JucePlugin_PreferredChannelConfigurations
     : AudioProcessor (BusesProperties()
                     #if ! JucePlugin_IsMidiEffect
                      #if ! JucePlugin_IsSynth
                       .withInput  ("Input",  juce::AudioChannelSet::mono(), true)
                      #endif
                       .withOutput ("Output", juce::AudioChannelSet::mono(), true)
                     #endif
                       )
#endif
{
    addParameter(mGain0 = new juce::AudioParameterFloat("0x00", "Gain0", 0.0f, 1.0f, 0.0f));
    addParameter(mGain1 = new juce::AudioParameterFloat("0x01", "Gain1", 0.0f, 1.0f, 0.0f));
    addParameter(mGain2 = new juce::AudioParameterFloat("0x02", "Gain2", 0.0f, 1.0f, 0.0f));
    addParameter(mGain3 = new juce::AudioParameterFloat("0x03", "Gain3", 0.0f, 1.0f, 0.0f));
    addParameter(mGain4 = new juce::AudioParameterFloat("0x04", "Gain4", 0.0f, 1.0f, 0.0f));
}

puannhiAudioProcessor::~puannhiAudioProcessor()
{
}

//==============================================================================
const juce::String puannhiAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool puannhiAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool puannhiAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool puannhiAudioProcessor::isMidiEffect() const
{
   #if JucePlugin_IsMidiEffect
    return true;
   #else
    return false;
   #endif
}

double puannhiAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int puannhiAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int puannhiAudioProcessor::getCurrentProgram()
{
    return 0;
}

void puannhiAudioProcessor::setCurrentProgram (int index)
{
}

const juce::String puannhiAudioProcessor::getProgramName (int index)
{
    return {};
}

void puannhiAudioProcessor::changeProgramName (int index, const juce::String& newName)
{
}

//==============================================================================
void puannhiAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    double b_0_L[] = { -0.0007770007770007757, 0.0, 0.0, 0.0, -3.469446951953614e-18, 0.0, 0.0, 0.0, 0.009324009324009341, 0.0, 0.0, 0.0, -6.938893903907228e-17, 0.0, 0.0, 0.0, -0.060606060606060524, 0.0, 0.0, 0.0, -2.7755575615628914e-17, 0.0, 0.0, 0.0, 0.4444444444444445, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.4444444444444445, 0.0, 0.0, 0.0, -2.7755575615628914e-17, 0.0, 0.0, 0.0, -0.060606060606060524, 0.0, 0.0, 0.0, -6.938893903907228e-17, 0.0, 0.0, 0.0, 0.009324009324009341, 0.0, 0.0, 0.0, -3.469446951953614e-18, 0.0, 0.0, 0.0, -0.0007770007770007757 };
    double b_0_H[] = { -0.0007770007770007757, 0.0, 0.0, 0.0, -3.469446951953614e-18, 0.0, 0.0, 0.0, 0.009324009324009341, 0.0, 0.0, 0.0, -6.938893903907228e-17, 0.0, 0.0, 0.0, -0.060606060606060524, 0.0, 0.0, 0.0, -2.7755575615628914e-17, 0.0, 0.0, 0.0, 0.4444444444444445, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.4444444444444445, 0.0, 0.0, 0.0, 2.7755575615628914e-17, 0.0, 0.0, 0.0, 0.060606060606060524, 0.0, 0.0, 0.0, 6.938893903907228e-17, 0.0, 0.0, 0.0, -0.009324009324009341, 0.0, 0.0, 0.0, 3.469446951953614e-18, 0.0, 0.0, 0.0, 0.0007770007770007757 };
    double a_0[] = { 2.0, 8.881784197001252e-15, -3.319566843629218e-14, 5.3179682879545e-14, 1.7863488466218769e-13, -1.3321872626483008e-12, 4.180156221167408e-12, -8.111483706940703e-12, 0.8888888888985511, -4.006217625417014e-12, -1.075994848775963e-11, 3.113326263459726e-11, -5.0552784180979415e-11, 6.35941713193889e-11, -6.788165862747775e-11, 6.375178163153805e-11, -0.12121212126570492, 4.095834137294662e-11, -2.9170822875290714e-11, 1.9846586180038983e-11, -1.2940529290489389e-11, 7.830838614675384e-12, -4.168364221499021e-12, 1.8485111445004643e-12, 0.0186480186473665, 1.7794288931896095e-13, -3.930709924215847e-14, 9.295515746021721e-15, -2.899590290095233e-15, 9.146076180335876e-16, -1.5243882545146192e-16, 1.3227266504323154e-17, -0.0015540015540015683 };
    iir0L.reset(new IIRFilter(b_0_L, a_0));
    iir0H.reset(new IIRFilter(b_0_H, a_0));

    double b_1_L[] = { 6.580816918681987e-06, 0.0, 4.336808689942018e-19, 0.0, -0.00011307039978463232, 0.0, -1.0408340855860843e-17, 0.0, 0.0009422533315386443, 0.0, -1.700029006457271e-16, 0.0, -0.005159958720329788, 0.0, -6.630980486921345e-16, 0.0, 0.02167182662538777, 0.0, -3.7470027081099033e-16, 0.0, -0.0823529411764704, 0.0, -5.551115123125783e-17, 0.0, 0.4666666666666667, 0.0, 1.0, 0.0, 1.0, 0.0, 0.4666666666666667, 0.0, -5.551115123125783e-17, 0.0, -0.0823529411764704, 0.0, -3.7470027081099033e-16, 0.0, 0.02167182662538777, 0.0, -6.630980486921345e-16, 0.0, -0.005159958720329788, 0.0, -1.700029006457271e-16, 0.0, 0.0009422533315386443, 0.0, -1.0408340855860843e-17, 0.0, -0.00011307039978463232, 0.0, 4.336808689942018e-19, 0.0, 6.580816918681987e-06 };
    double b_1_H[] = { 6.580816918681987e-06, 0.0, 4.336808689942018e-19, 0.0, -0.00011307039978463232, 0.0, -1.0408340855860843e-17, 0.0, 0.0009422533315386443, 0.0, -1.700029006457271e-16, 0.0, -0.005159958720329788, 0.0, -6.630980486921345e-16, 0.0, 0.02167182662538777, 0.0, -3.7470027081099033e-16, 0.0, -0.0823529411764704, 0.0, -5.551115123125783e-17, 0.0, 0.4666666666666667, 0.0, -1.0, 0.0, 1.0, 0.0, -0.4666666666666667, 0.0, 5.551115123125783e-17, 0.0, 0.0823529411764704, 0.0, 3.7470027081099033e-16, 0.0, -0.02167182662538777, 0.0, 6.630980486921345e-16, 0.0, 0.005159958720329788, 0.0, 1.700029006457271e-16, 0.0, -0.0009422533315386443, 0.0, 1.0408340855860843e-17, 0.0, 0.00011307039978463232, 0.0, -4.336808689942018e-19, 0.0, -6.580816918681987e-06 };
    double a_1[] = { 2.0, 1.3322676295501878e-14, 1.6381861145386978e-14, -2.3708465746175023e-14, 0.9333333333333593, -7.153132253190364e-15, 1.8273577095939686e-14, -4.188923513614995e-14, -0.16470588235285713, -1.2515422725956071e-13, 1.2827694635675346e-13, -9.495204102150101e-14, 0.04334365325082531, -1.0353426015824452e-14, -1.5980381080915596e-14, 1.9576218901126707e-14, -0.010319917440673959, 8.48436989067669e-15, -6.085484492625998e-15, 3.3562528570143385e-15, 0.0018845066630758037, 7.523829446292631e-16, -2.4839495288116534e-16, 7.427123694704607e-17, -0.00022614079956929361, 3.847223646429032e-18, 8.4608003518863925e-19, -2.743857353511899e-19, 1.3161633837364472e-05 };
    iir1L.reset(new IIRFilter(b_1_L, a_1));
    iir1H.reset(new IIRFilter(b_1_H, a_1));

    double b_2_L[] = { -0.0007770007770007757, -3.469446951953614e-18, 0.009324009324009341, -6.938893903907228e-17, -0.060606060606060524, -2.7755575615628914e-17, 0.4444444444444445, 1.0, 1.0, 0.4444444444444445, -2.7755575615628914e-17, -0.060606060606060524, -6.938893903907228e-17, 0.009324009324009341, -3.469446951953614e-18, -0.0007770007770007757 };
    double b_2_H[] = { -0.0007770007770007757, -3.469446951953614e-18, 0.009324009324009341, -6.938893903907228e-17, -0.060606060606060524, -2.7755575615628914e-17, 0.4444444444444445, -1.0, 1.0, -0.4444444444444445, 2.7755575615628914e-17, 0.060606060606060524, 6.938893903907228e-17, -0.009324009324009341, 3.469446951953614e-18, 0.0007770007770007757 };
    double a_2[] = { 2.0, -1.887379141862766e-15, 0.8888888888888911, -7.771561172376096e-16, -0.12121212121212149, -9.454242944073599e-17, 0.018648018648018717, -2.6020852139652106e-17, -0.0015540015540015566 };
    iir2L.reset(new IIRFilter(b_2_L, a_2));
    iir2H.reset(new IIRFilter(b_2_H, a_2));

    double b_3_L[] = { -1.0662192725601971e-16, 1.0670629901934057e-22, 5.4021759218293816e-15, 1.9164120431628545e-20, -1.343637166453934e-13, 1.751664134921893e-18, 2.186947251439121e-12, 3.028989819381378e-17, -2.620151006425299e-11, 5.432937086324863e-16, 2.4643423694910294e-10, -6.687358999890591e-16, -1.8951888738905076e-09, -4.372977674416134e-14, 1.22573584736968e-08, -1.8372196125548967e-13, -6.805730257781681e-08, -3.9683057187489545e-13, 3.295972288257232e-07, -1.1850562848733648e-12, -1.4099410535432636e-06, -4.078825561267159e-12, 5.38341794824382e-06, 6.647658523301135e-14, -1.8510366982634345e-05, 4.456081728585501e-14, 5.7768614376381265e-05, -3.2710325333779044e-14, -0.00016483601017310142, 8.490447928055644e-13, 0.000433098526965452, -7.302144999776772e-13, -0.0010556776614577962, -2.7784718970025324e-13, 0.00240751828739183, 1.1418643808269735e-13, -0.005191971256161054, 7.599476603559197e-14, 0.010748291372121521, -3.885780586188048e-16, -0.021880450293324638, -1.2212453270876722e-15, 0.04584475299553942, -2.7755575615628914e-16, -0.11044417767106818, -5.551115123125783e-17, 0.48979591836734687, 1.0, 1.0, 0.48979591836734687, -5.551115123125783e-17, -0.11044417767106818, -2.7755575615628914e-16, 0.04584475299553942, -1.2212453270876722e-15, -0.021880450293324638, -3.885780586188048e-16, 0.010748291372121521, 7.599476603559197e-14, -0.005191971256161054, 1.1418643808269735e-13, 0.00240751828739183, -2.7784718970025324e-13, -0.0010556776614577962, -7.302144999776772e-13, 0.000433098526965452, 8.490447928055644e-13, -0.00016483601017310142, -3.2710325333779044e-14, 5.7768614376381265e-05, 4.456081728585501e-14, -1.8510366982634345e-05, 6.647658523301135e-14, 5.38341794824382e-06, -4.078825561267159e-12, -1.4099410535432636e-06, -1.1850562848733648e-12, 3.295972288257232e-07, -3.9683057187489545e-13, -6.805730257781681e-08, -1.8372196125548967e-13, 1.22573584736968e-08, -4.372977674416134e-14, -1.8951888738905076e-09, -6.687358999890591e-16, 2.4643423694910294e-10, 5.432937086324863e-16, -2.620151006425299e-11, 3.028989819381378e-17, 2.186947251439121e-12, 1.751664134921893e-18, -1.343637166453934e-13, 1.9164120431628545e-20, 5.4021759218293816e-15, 1.0670629901934057e-22, -1.0662192725601971e-16 };
    double b_3_H[] = { -1.0662192725601971e-16, 1.0670629901934057e-22, 5.4021759218293816e-15, 1.9164120431628545e-20, -1.343637166453934e-13, 1.751664134921893e-18, 2.186947251439121e-12, 3.028989819381378e-17, -2.620151006425299e-11, 5.432937086324863e-16, 2.4643423694910294e-10, -6.687358999890591e-16, -1.8951888738905076e-09, -4.372977674416134e-14, 1.22573584736968e-08, -1.8372196125548967e-13, -6.805730257781681e-08, -3.9683057187489545e-13, 3.295972288257232e-07, -1.1850562848733648e-12, -1.4099410535432636e-06, -4.078825561267159e-12, 5.38341794824382e-06, 6.647658523301135e-14, -1.8510366982634345e-05, 4.456081728585501e-14, 5.7768614376381265e-05, -3.2710325333779044e-14, -0.00016483601017310142, 8.490447928055644e-13, 0.000433098526965452, -7.302144999776772e-13, -0.0010556776614577962, -2.7784718970025324e-13, 0.00240751828739183, 1.1418643808269735e-13, -0.005191971256161054, 7.599476603559197e-14, 0.010748291372121521, -3.885780586188048e-16, -0.021880450293324638, -1.2212453270876722e-15, 0.04584475299553942, -2.7755575615628914e-16, -0.11044417767106818, -5.551115123125783e-17, 0.48979591836734687, -1.0, 1.0, -0.48979591836734687, 5.551115123125783e-17, 0.11044417767106818, 2.7755575615628914e-16, -0.04584475299553942, 1.2212453270876722e-15, 0.021880450293324638, 3.885780586188048e-16, -0.010748291372121521, -7.599476603559197e-14, 0.005191971256161054, -1.1418643808269735e-13, -0.00240751828739183, 2.7784718970025324e-13, 0.0010556776614577962, 7.302144999776772e-13, -0.000433098526965452, -8.490447928055644e-13, 0.00016483601017310142, 3.2710325333779044e-14, -5.7768614376381265e-05, -4.456081728585501e-14, 1.8510366982634345e-05, -6.647658523301135e-14, -5.38341794824382e-06, 4.078825561267159e-12, 1.4099410535432636e-06, 1.1850562848733648e-12, -3.295972288257232e-07, 3.9683057187489545e-13, 6.805730257781681e-08, 1.8372196125548967e-13, -1.22573584736968e-08, 4.372977674416134e-14, 1.8951888738905076e-09, 6.687358999890591e-16, -2.4643423694910294e-10, -5.432937086324863e-16, 2.620151006425299e-11, -3.028989819381378e-17, -2.186947251439121e-12, -1.751664134921893e-18, 1.343637166453934e-13, -1.9164120431628545e-20, -5.4021759218293816e-15, -1.0670629901934057e-22, 1.0662192725601971e-16 };
    double a_3[] = { 2.0, 9.325873406851315e-15, 0.979591836734714, -7.417265586451283e-14, -0.2208883553419633, -2.5850523978354634e-13, 0.09168950599127748, 1.6706024042432988e-13, -0.04376090058756188, 1.7316319412446005e-12, 0.021496582742163286, 1.986454093732171e-12, -0.010383942513870138, 1.8657352833501397e-12, 0.004815036573002169, 8.636037712858244e-13, -0.002111355323477104, -1.7291995264708492e-12, 0.0008661970545728278, 1.0994854696971479e-12, -0.0003296720199497059, -2.9457259740346987e-13, 0.00011553722888990306, 5.441673701780199e-16, -3.7020733905393314e-05, 9.527415144521926e-14, 1.0766835918551951e-05, -8.168544197566993e-12, -2.819882102856596e-06, -2.3720569865284386e-12, 6.591944579101855e-07, -7.94111839993853e-13, -1.361146053815442e-07, -3.6734675626393766e-13, 2.4514718055138448e-08, -8.754283666424412e-14, -3.7903774876390645e-09, -1.333282321831831e-15, 4.928686087764165e-10, 1.086274836949311e-15, -5.240299980601897e-11, 6.057779781114951e-17, 4.3738944080386036e-12, 3.5033303240083955e-18, -2.6872743327373633e-13, 3.832823985114855e-20, 1.0804351843654898e-14, 2.1341259499725257e-22, -2.1324385451204916e-16 };
    iir3L.reset(new IIRFilter(b_3_L, a_3));
    iir3H.reset(new IIRFilter(b_3_H, a_3));

}

void puannhiAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

#ifndef JucePlugin_PreferredChannelConfigurations
bool puannhiAudioProcessor::isBusesLayoutSupported (const BusesLayout& layouts) const
{
  #if JucePlugin_IsMidiEffect
    juce::ignoreUnused (layouts);
    return true;
  #else
    // This is the place where you check if the layout is supported.
    // In this template code we only support mono or stereo.
    // Some plugin hosts, such as certain GarageBand versions, will only
    // load plugins that support stereo bus layouts.
    if (layouts.getMainOutputChannelSet() != juce::AudioChannelSet::mono()
     && layouts.getMainOutputChannelSet() != juce::AudioChannelSet::stereo())
        return false;

    // This checks if the input layout matches the output layout
   #if ! JucePlugin_IsSynth
    if (layouts.getMainOutputChannelSet() != layouts.getMainInputChannelSet())
        return false;
   #endif

    return true;
  #endif
}
#endif

void puannhiAudioProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    juce::ScopedNoDenormals noDenormals;
    
    auto* input = buffer.getReadPointer(0);
    auto* output = buffer.getWritePointer(0);

    for(int i = 0; i < getBlockSize(); i++)
    {
        auto gain0 = mGain0->get();
        auto gain1 = mGain1->get();
        auto gain2 = mGain2->get();
        auto gain3 = mGain3->get();
        auto gain4 = mGain4->get();

        double h_0_l = iir0L->process_sample(input[i]);
        double h_0_h = iir0H->process_sample(input[i]);

        double h_1_l = iir1L->process_sample(h_0_l);
        double channel_2 = iir1H->process_sample(h_0_l);

        double channel_0 = iir2L->process_sample(h_1_l);
        double channel_4 = iir2H->process_sample(h_1_l);

        double channel_1 = iir3L->process_sample(h_0_h);
        double channel_3 = iir3H->process_sample(h_0_h);

        output[i] = channel_0 * gain0 + channel_1 * gain1 + channel_2 * gain2 + channel_3 * gain3 + channel_4 * gain4;
    }
}

//==============================================================================
bool puannhiAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

juce::AudioProcessorEditor* puannhiAudioProcessor::createEditor()
{
    return new puannhiAudioProcessorEditor (*this);
}

//==============================================================================
void puannhiAudioProcessor::getStateInformation (juce::MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void puannhiAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
juce::AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new puannhiAudioProcessor();
}
